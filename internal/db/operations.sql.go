// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: operations.sql

package db

import (
	"context"
	"database/sql"
)

const createOperation = `-- name: CreateOperation :one
INSERT INTO operations (type, status, standard_id, directory_path, filter_pattern, skip_pattern, settings)
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id, type, status, standard_id, directory_path, filter_pattern, skip_pattern, settings, created_at, updated_at, started_at, completed_at
`

type CreateOperationParams struct {
	Type          string         `db:"type" json:"type"`
	Status        string         `db:"status" json:"status"`
	StandardID    sql.NullInt64  `db:"standard_id" json:"standard_id"`
	DirectoryPath string         `db:"directory_path" json:"directory_path"`
	FilterPattern sql.NullString `db:"filter_pattern" json:"filter_pattern"`
	SkipPattern   sql.NullString `db:"skip_pattern" json:"skip_pattern"`
	Settings      sql.NullString `db:"settings" json:"settings"`
}

func (q *Queries) CreateOperation(ctx context.Context, arg CreateOperationParams) (Operation, error) {
	row := q.db.QueryRowContext(ctx, createOperation,
		arg.Type,
		arg.Status,
		arg.StandardID,
		arg.DirectoryPath,
		arg.FilterPattern,
		arg.SkipPattern,
		arg.Settings,
	)
	var i Operation
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Status,
		&i.StandardID,
		&i.DirectoryPath,
		&i.FilterPattern,
		&i.SkipPattern,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartedAt,
		&i.CompletedAt,
	)
	return i, err
}

const deleteOperation = `-- name: DeleteOperation :exec
DELETE FROM operations
WHERE id = ?
`

func (q *Queries) DeleteOperation(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOperation, id)
	return err
}

const getOperation = `-- name: GetOperation :one
SELECT id, type, status, standard_id, directory_path, filter_pattern, skip_pattern, settings, created_at, updated_at, started_at, completed_at FROM operations
WHERE id = ?
`

func (q *Queries) GetOperation(ctx context.Context, id int64) (Operation, error) {
	row := q.db.QueryRowContext(ctx, getOperation, id)
	var i Operation
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Status,
		&i.StandardID,
		&i.DirectoryPath,
		&i.FilterPattern,
		&i.SkipPattern,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartedAt,
		&i.CompletedAt,
	)
	return i, err
}

const listOperations = `-- name: ListOperations :many
SELECT id, type, status, standard_id, directory_path, filter_pattern, skip_pattern, settings, created_at, updated_at, started_at, completed_at FROM operations
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListOperationsParams struct {
	Limit  int64 `db:"limit" json:"limit"`
	Offset int64 `db:"offset" json:"offset"`
}

func (q *Queries) ListOperations(ctx context.Context, arg ListOperationsParams) ([]Operation, error) {
	rows, err := q.db.QueryContext(ctx, listOperations, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Operation{}
	for rows.Next() {
		var i Operation
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Status,
			&i.StandardID,
			&i.DirectoryPath,
			&i.FilterPattern,
			&i.SkipPattern,
			&i.Settings,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StartedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOperationsByType = `-- name: ListOperationsByType :many
SELECT id, type, status, standard_id, directory_path, filter_pattern, skip_pattern, settings, created_at, updated_at, started_at, completed_at FROM operations
WHERE type = ?
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListOperationsByTypeParams struct {
	Type   string `db:"type" json:"type"`
	Limit  int64  `db:"limit" json:"limit"`
	Offset int64  `db:"offset" json:"offset"`
}

func (q *Queries) ListOperationsByType(ctx context.Context, arg ListOperationsByTypeParams) ([]Operation, error) {
	rows, err := q.db.QueryContext(ctx, listOperationsByType, arg.Type, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Operation{}
	for rows.Next() {
		var i Operation
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Status,
			&i.StandardID,
			&i.DirectoryPath,
			&i.FilterPattern,
			&i.SkipPattern,
			&i.Settings,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StartedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOperationCompleted = `-- name: UpdateOperationCompleted :one
UPDATE operations
SET status = ?, completed_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, type, status, standard_id, directory_path, filter_pattern, skip_pattern, settings, created_at, updated_at, started_at, completed_at
`

type UpdateOperationCompletedParams struct {
	Status string `db:"status" json:"status"`
	ID     int64  `db:"id" json:"id"`
}

func (q *Queries) UpdateOperationCompleted(ctx context.Context, arg UpdateOperationCompletedParams) (Operation, error) {
	row := q.db.QueryRowContext(ctx, updateOperationCompleted, arg.Status, arg.ID)
	var i Operation
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Status,
		&i.StandardID,
		&i.DirectoryPath,
		&i.FilterPattern,
		&i.SkipPattern,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartedAt,
		&i.CompletedAt,
	)
	return i, err
}

const updateOperationStarted = `-- name: UpdateOperationStarted :one
UPDATE operations
SET status = ?, started_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, type, status, standard_id, directory_path, filter_pattern, skip_pattern, settings, created_at, updated_at, started_at, completed_at
`

type UpdateOperationStartedParams struct {
	Status string `db:"status" json:"status"`
	ID     int64  `db:"id" json:"id"`
}

func (q *Queries) UpdateOperationStarted(ctx context.Context, arg UpdateOperationStartedParams) (Operation, error) {
	row := q.db.QueryRowContext(ctx, updateOperationStarted, arg.Status, arg.ID)
	var i Operation
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Status,
		&i.StandardID,
		&i.DirectoryPath,
		&i.FilterPattern,
		&i.SkipPattern,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartedAt,
		&i.CompletedAt,
	)
	return i, err
}

const updateOperationStatus = `-- name: UpdateOperationStatus :one
UPDATE operations
SET status = ?
WHERE id = ?
RETURNING id, type, status, standard_id, directory_path, filter_pattern, skip_pattern, settings, created_at, updated_at, started_at, completed_at
`

type UpdateOperationStatusParams struct {
	Status string `db:"status" json:"status"`
	ID     int64  `db:"id" json:"id"`
}

func (q *Queries) UpdateOperationStatus(ctx context.Context, arg UpdateOperationStatusParams) (Operation, error) {
	row := q.db.QueryRowContext(ctx, updateOperationStatus, arg.Status, arg.ID)
	var i Operation
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Status,
		&i.StandardID,
		&i.DirectoryPath,
		&i.FilterPattern,
		&i.SkipPattern,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StartedAt,
		&i.CompletedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: operation_logs.sql

package db

import (
	"context"
	"database/sql"
)

const createOperationLog = `-- name: CreateOperationLog :one
INSERT INTO operation_logs (operation_id, level, message, details)
VALUES (?, ?, ?, ?)
RETURNING id, operation_id, level, message, details, created_at
`

type CreateOperationLogParams struct {
	OperationID int64          `db:"operation_id" json:"operation_id"`
	Level       string         `db:"level" json:"level"`
	Message     string         `db:"message" json:"message"`
	Details     sql.NullString `db:"details" json:"details"`
}

func (q *Queries) CreateOperationLog(ctx context.Context, arg CreateOperationLogParams) (OperationLog, error) {
	row := q.db.QueryRowContext(ctx, createOperationLog,
		arg.OperationID,
		arg.Level,
		arg.Message,
		arg.Details,
	)
	var i OperationLog
	err := row.Scan(
		&i.ID,
		&i.OperationID,
		&i.Level,
		&i.Message,
		&i.Details,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOperationLogs = `-- name: DeleteOperationLogs :exec
DELETE FROM operation_logs
WHERE operation_id = ?
`

func (q *Queries) DeleteOperationLogs(ctx context.Context, operationID int64) error {
	_, err := q.db.ExecContext(ctx, deleteOperationLogs, operationID)
	return err
}

const getOperationLogs = `-- name: GetOperationLogs :many
SELECT id, operation_id, level, message, details, created_at FROM operation_logs
WHERE operation_id = ?
ORDER BY created_at ASC
`

func (q *Queries) GetOperationLogs(ctx context.Context, operationID int64) ([]OperationLog, error) {
	rows, err := q.db.QueryContext(ctx, getOperationLogs, operationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OperationLog{}
	for rows.Next() {
		var i OperationLog
		if err := rows.Scan(
			&i.ID,
			&i.OperationID,
			&i.Level,
			&i.Message,
			&i.Details,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOperationLogsByLevel = `-- name: GetOperationLogsByLevel :many
SELECT id, operation_id, level, message, details, created_at FROM operation_logs
WHERE operation_id = ? AND level = ?
ORDER BY created_at ASC
`

type GetOperationLogsByLevelParams struct {
	OperationID int64  `db:"operation_id" json:"operation_id"`
	Level       string `db:"level" json:"level"`
}

func (q *Queries) GetOperationLogsByLevel(ctx context.Context, arg GetOperationLogsByLevelParams) ([]OperationLog, error) {
	rows, err := q.db.QueryContext(ctx, getOperationLogsByLevel, arg.OperationID, arg.Level)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OperationLog{}
	for rows.Next() {
		var i OperationLog
		if err := rows.Scan(
			&i.ID,
			&i.OperationID,
			&i.Level,
			&i.Message,
			&i.Details,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

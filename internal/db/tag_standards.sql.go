// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tag_standards.sql

package db

import (
	"context"
	"database/sql"
)

const createTagStandard = `-- name: CreateTagStandard :one
INSERT INTO tag_standards (name, description, cloud_provider, version, content)
VALUES (?, ?, ?, ?, ?)
RETURNING id, name, description, cloud_provider, version, content, created_at, updated_at
`

type CreateTagStandardParams struct {
	Name          string         `db:"name" json:"name"`
	Description   sql.NullString `db:"description" json:"description"`
	CloudProvider string         `db:"cloud_provider" json:"cloud_provider"`
	Version       int64          `db:"version" json:"version"`
	Content       string         `db:"content" json:"content"`
}

func (q *Queries) CreateTagStandard(ctx context.Context, arg CreateTagStandardParams) (TagStandard, error) {
	row := q.db.QueryRowContext(ctx, createTagStandard,
		arg.Name,
		arg.Description,
		arg.CloudProvider,
		arg.Version,
		arg.Content,
	)
	var i TagStandard
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CloudProvider,
		&i.Version,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTagStandard = `-- name: DeleteTagStandard :exec
DELETE FROM tag_standards
WHERE id = ?
`

func (q *Queries) DeleteTagStandard(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTagStandard, id)
	return err
}

const getTagStandard = `-- name: GetTagStandard :one
SELECT id, name, description, cloud_provider, version, content, created_at, updated_at FROM tag_standards
WHERE id = ?
`

func (q *Queries) GetTagStandard(ctx context.Context, id int64) (TagStandard, error) {
	row := q.db.QueryRowContext(ctx, getTagStandard, id)
	var i TagStandard
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CloudProvider,
		&i.Version,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTagStandardByName = `-- name: GetTagStandardByName :one
SELECT id, name, description, cloud_provider, version, content, created_at, updated_at FROM tag_standards
WHERE name = ?
`

func (q *Queries) GetTagStandardByName(ctx context.Context, name string) (TagStandard, error) {
	row := q.db.QueryRowContext(ctx, getTagStandardByName, name)
	var i TagStandard
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CloudProvider,
		&i.Version,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTagStandards = `-- name: ListTagStandards :many
SELECT id, name, description, cloud_provider, version, content, created_at, updated_at FROM tag_standards
ORDER BY created_at DESC
`

func (q *Queries) ListTagStandards(ctx context.Context) ([]TagStandard, error) {
	rows, err := q.db.QueryContext(ctx, listTagStandards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TagStandard{}
	for rows.Next() {
		var i TagStandard
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CloudProvider,
			&i.Version,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTagStandardsByProvider = `-- name: ListTagStandardsByProvider :many
SELECT id, name, description, cloud_provider, version, content, created_at, updated_at FROM tag_standards
WHERE cloud_provider = ?
ORDER BY created_at DESC
`

func (q *Queries) ListTagStandardsByProvider(ctx context.Context, cloudProvider string) ([]TagStandard, error) {
	rows, err := q.db.QueryContext(ctx, listTagStandardsByProvider, cloudProvider)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TagStandard{}
	for rows.Next() {
		var i TagStandard
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CloudProvider,
			&i.Version,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTagStandard = `-- name: UpdateTagStandard :one
UPDATE tag_standards
SET name = ?, description = ?, cloud_provider = ?, version = ?, content = ?
WHERE id = ?
RETURNING id, name, description, cloud_provider, version, content, created_at, updated_at
`

type UpdateTagStandardParams struct {
	Name          string         `db:"name" json:"name"`
	Description   sql.NullString `db:"description" json:"description"`
	CloudProvider string         `db:"cloud_provider" json:"cloud_provider"`
	Version       int64          `db:"version" json:"version"`
	Content       string         `db:"content" json:"content"`
	ID            int64          `db:"id" json:"id"`
}

func (q *Queries) UpdateTagStandard(ctx context.Context, arg UpdateTagStandardParams) (TagStandard, error) {
	row := q.db.QueryRowContext(ctx, updateTagStandard,
		arg.Name,
		arg.Description,
		arg.CloudProvider,
		arg.Version,
		arg.Content,
		arg.ID,
	)
	var i TagStandard
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CloudProvider,
		&i.Version,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

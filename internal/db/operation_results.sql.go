// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: operation_results.sql

package db

import (
	"context"
	"database/sql"
)

const countOperationResultsByAction = `-- name: CountOperationResultsByAction :one
SELECT COUNT(*) FROM operation_results
WHERE operation_id = ? AND action = ?
`

type CountOperationResultsByActionParams struct {
	OperationID int64  `db:"operation_id" json:"operation_id"`
	Action      string `db:"action" json:"action"`
}

func (q *Queries) CountOperationResultsByAction(ctx context.Context, arg CountOperationResultsByActionParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countOperationResultsByAction, arg.OperationID, arg.Action)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createOperationResult = `-- name: CreateOperationResult :one
INSERT INTO operation_results (operation_id, file_path, resource_type, resource_name, line_number, snippet, action, violation_type, details)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id, operation_id, file_path, resource_type, resource_name, "action", violation_type, details, created_at, line_number, snippet
`

type CreateOperationResultParams struct {
	OperationID   int64          `db:"operation_id" json:"operation_id"`
	FilePath      string         `db:"file_path" json:"file_path"`
	ResourceType  sql.NullString `db:"resource_type" json:"resource_type"`
	ResourceName  sql.NullString `db:"resource_name" json:"resource_name"`
	LineNumber    sql.NullInt64  `db:"line_number" json:"line_number"`
	Snippet       sql.NullString `db:"snippet" json:"snippet"`
	Action        string         `db:"action" json:"action"`
	ViolationType sql.NullString `db:"violation_type" json:"violation_type"`
	Details       sql.NullString `db:"details" json:"details"`
}

func (q *Queries) CreateOperationResult(ctx context.Context, arg CreateOperationResultParams) (OperationResult, error) {
	row := q.db.QueryRowContext(ctx, createOperationResult,
		arg.OperationID,
		arg.FilePath,
		arg.ResourceType,
		arg.ResourceName,
		arg.LineNumber,
		arg.Snippet,
		arg.Action,
		arg.ViolationType,
		arg.Details,
	)
	var i OperationResult
	err := row.Scan(
		&i.ID,
		&i.OperationID,
		&i.FilePath,
		&i.ResourceType,
		&i.ResourceName,
		&i.Action,
		&i.ViolationType,
		&i.Details,
		&i.CreatedAt,
		&i.LineNumber,
		&i.Snippet,
	)
	return i, err
}

const deleteOperationResults = `-- name: DeleteOperationResults :exec
DELETE FROM operation_results
WHERE operation_id = ?
`

func (q *Queries) DeleteOperationResults(ctx context.Context, operationID int64) error {
	_, err := q.db.ExecContext(ctx, deleteOperationResults, operationID)
	return err
}

const getOperationResults = `-- name: GetOperationResults :many
SELECT id, operation_id, file_path, resource_type, resource_name, "action", violation_type, details, created_at, line_number, snippet FROM operation_results
WHERE operation_id = ?
ORDER BY created_at ASC
`

func (q *Queries) GetOperationResults(ctx context.Context, operationID int64) ([]OperationResult, error) {
	rows, err := q.db.QueryContext(ctx, getOperationResults, operationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OperationResult{}
	for rows.Next() {
		var i OperationResult
		if err := rows.Scan(
			&i.ID,
			&i.OperationID,
			&i.FilePath,
			&i.ResourceType,
			&i.ResourceName,
			&i.Action,
			&i.ViolationType,
			&i.Details,
			&i.CreatedAt,
			&i.LineNumber,
			&i.Snippet,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOperationResultsByAction = `-- name: GetOperationResultsByAction :many
SELECT id, operation_id, file_path, resource_type, resource_name, "action", violation_type, details, created_at, line_number, snippet FROM operation_results
WHERE operation_id = ? AND action = ?
ORDER BY created_at ASC
`

type GetOperationResultsByActionParams struct {
	OperationID int64  `db:"operation_id" json:"operation_id"`
	Action      string `db:"action" json:"action"`
}

func (q *Queries) GetOperationResultsByAction(ctx context.Context, arg GetOperationResultsByActionParams) ([]OperationResult, error) {
	rows, err := q.db.QueryContext(ctx, getOperationResultsByAction, arg.OperationID, arg.Action)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OperationResult{}
	for rows.Next() {
		var i OperationResult
		if err := rows.Scan(
			&i.ID,
			&i.OperationID,
			&i.FilePath,
			&i.ResourceType,
			&i.ResourceName,
			&i.Action,
			&i.ViolationType,
			&i.Details,
			&i.CreatedAt,
			&i.LineNumber,
			&i.Snippet,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
